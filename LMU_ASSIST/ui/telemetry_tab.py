import logging
from PyQt5 import QtWidgets

try:
    import pyqtgraph as pg
    PYQTGRAPH_AVAILABLE = True
except ImportError:
    PYQTGRAPH_AVAILABLE = False

try:
    from core.telemetry_receiver import TelemetryReceiver
    from core.telemetry_buffer import TelemetryBuffer
    TELEMETRY_AVAILABLE = True
except ImportError:
    TELEMETRY_AVAILABLE = False

class TelemetryTab(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__()
        self.parent_window = parent
        self.layout = QtWidgets.QVBoxLayout()
        self.setLayout(self.layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QtWidgets.QLabel("üì° –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è")
        title.setStyleSheet("font-size: 18px; font-weight: bold; margin: 10px;")
        self.layout.addWidget(title)
        
        if not TELEMETRY_AVAILABLE:
            error_label = QtWidgets.QLabel("‚ùå –ú–æ–¥—É–ª–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            error_label.setStyleSheet("color: red; font-size: 14px;")
            self.layout.addWidget(error_label)
            return
            
        if not PYQTGRAPH_AVAILABLE:
            error_label = QtWidgets.QLabel("‚ùå PyQtGraph –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            error_label.setStyleSheet("color: red; font-size: 14px;")
            self.layout.addWidget(error_label)
            return
        
        try:
            self.receiver = TelemetryReceiver()
            self.buffer = TelemetryBuffer()
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            self.graph = pg.PlotWidget()
            self.graph.setLabel('left', '–ó–Ω–∞—á–µ–Ω–∏–µ')
            self.graph.setLabel('bottom', '–í—Ä–µ–º—è')
            self.graph.showGrid(x=True, y=True)
            self.layout.addWidget(self.graph)
            
            # –°—Ç–∞—Ç—É—Å
            self.status_label = QtWidgets.QLabel("–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
            self.layout.addWidget(self.status_label)
            
            # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.update_button = QtWidgets.QPushButton("–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫")
            self.update_button.clicked.connect(self.update_graph)
            self.layout.addWidget(self.update_button)
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            instructions = QtWidgets.QLabel(
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–≥—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç UDP –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–æ—Ä—Ç 20777\n"
                "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç RPM (–∫—Ä–∞—Å–Ω—ã–π), –≥–∞–∑ (–∑–µ–ª–µ–Ω—ã–π), —Ç–æ—Ä–º–æ–∑ (—Å–∏–Ω–∏–π)\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
            )
            instructions.setStyleSheet("background: #f0f0f0; padding: 10px; border-radius: 5px; margin: 10px;")
            self.layout.addWidget(instructions)
            
        except Exception as e:
            error_label = QtWidgets.QLabel(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏: {e}")
            error_label.setStyleSheet("color: red; font-size: 14px;")
            self.layout.addWidget(error_label)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger = logging.getLogger(__name__)
            logger.error(f"Telemetry tab initialization error: {e}")

    def update_graph(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞"""
        if not hasattr(self, 'receiver') or not self.receiver:
            self.status_label.setText("‚ùå –ü—Ä–∏–µ–º–Ω–∏–∫ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞
            rpm_data = self.buffer.get_parameter_history('rpm', 100)
            throttle_data = self.buffer.get_parameter_history('throttle', 100)
            brake_data = self.buffer.get_parameter_history('brake', 100)
            
            if not rpm_data:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                data = self.receiver.get_latest_data()
                if data:
                    self.buffer.add_data(data)
                    rpm_data = [data.get("rpm", 0)]
                    throttle_data = [data.get("throttle", 0)]
                    brake_data = [data.get("brake", 0)]
                else:
                    self.status_label.setText("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏")
                    return
            
            # –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            self.graph.clear()
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            x_data = list(range(len(rpm_data)))
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º RPM –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            rpm_normalized = [rpm / 8000.0 for rpm in rpm_data]
            
            # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
            self.graph.plot(x_data, rpm_normalized, pen=pg.mkPen('r', width=2), name='RPM')
            self.graph.plot(x_data, throttle_data, pen=pg.mkPen('g', width=2), name='Throttle')
            self.graph.plot(x_data, brake_data, pen=pg.mkPen('b', width=2), name='Brake')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.setText(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(rpm_data)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
            
        except Exception as e:
            self.status_label.setText(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger = logging.getLogger(__name__)
            logger.error(f"Graph update error: {e}")