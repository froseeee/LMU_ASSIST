from PyQt5 import QtWidgets, QtCore, QtGui
from core.setupexpert import SetupExpert
from core.exceptions import FileError, ValidationError
import json
from pathlib import Path

class GarageTab(QtWidgets.QWidget):
    """–ö—Ä–∞—Å–∏–≤–∞—è –∏ —Å—Ç–∏–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ Setup Expert"""
    
    def __init__(self, parent=None):
        super().__init__()
        self.parent_window = parent
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Setup Expert
        try:
            data_file = Path("data/lmu_data.json")
            if data_file.exists():
                self.expert = SetupExpert(str(data_file))
            else:
                self.expert = SetupExpert()
        except Exception as e:
            self.expert = SetupExpert()
            print(f"Warning: Could not load setup expert: {e}")
        
        self.setup_styles()
        self.init_ui()

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        self.setStyleSheet("""
            QWidget {
                background-color: #1e1e2e;
                color: #cdd6f4;
                font-family: 'Segoe UI', Arial, sans-serif;
            }
            
            QGroupBox {
                font-size: 16px;
                font-weight: bold;
                border: 2px solid #45475a;
                border-radius: 12px;
                margin-top: 16px;
                padding-top: 20px;
                background-color: #313244;
            }
            
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 16px;
                padding: 0 8px 0 8px;
                color: #89b4fa;
                background-color: #313244;
                border-radius: 4px;
            }
            
            QLabel {
                color: #cdd6f4;
                font-size: 14px;
                font-weight: 500;
                padding: 4px 0;
            }
            
            QComboBox {
                background-color: #45475a;
                border: 2px solid #6c7086;
                border-radius: 8px;
                padding: 8px 12px;
                color: #cdd6f4;
                font-size: 14px;
                min-height: 20px;
            }
            
            QComboBox:hover {
                border-color: #89b4fa;
                background-color: #505264;
            }
            
            QComboBox:focus {
                border-color: #cba6f7;
            }
            
            QComboBox::drop-down {
                border: none;
                width: 30px;
                padding-right: 10px;
            }
            
            QComboBox::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 6px solid #cdd6f4;
                margin-right: 6px;
            }
            
            QSlider::groove:horizontal {
                border: 1px solid #6c7086;
                height: 8px;
                background: #45475a;
                margin: 2px 0;
                border-radius: 4px;
            }
            
            QSlider::handle:horizontal {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #cba6f7, stop:1 #89b4fa);
                border: 2px solid #1e1e2e;
                width: 20px;
                height: 20px;
                margin: -7px 0;
                border-radius: 12px;
            }
            
            QSlider::handle:horizontal:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #f9e2af, stop:1 #cba6f7);
            }
            
            QSlider::sub-page:horizontal {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #89b4fa, stop:1 #cba6f7);
                border-radius: 4px;
            }
            
            QTextEdit {
                background-color: #45475a;
                border: 2px solid #6c7086;
                border-radius: 8px;
                color: #cdd6f4;
                font-size: 13px;
                line-height: 1.5;
                padding: 12px;
            }
            
            QTextEdit:focus {
                border-color: #89b4fa;
            }
        """)

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QtWidgets.QVBoxLayout(self)
        main_layout.setContentsMargins(24, 24, 24, 24)
        main_layout.setSpacing(24)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
        self.create_header(main_layout)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_layout = QtWidgets.QHBoxLayout()
        content_layout.setSpacing(24)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
        left_panel = self.create_settings_panel()
        content_layout.addWidget(left_panel)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
        right_panel = self.create_results_panel()
        content_layout.addWidget(right_panel)
        
        main_layout.addLayout(content_layout)

    def create_header(self, parent_layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        header = QtWidgets.QFrame()
        header.setFixedHeight(100)
        header.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #89b4fa, stop:0.5 #cba6f7, stop:1 #f9e2af);
                border-radius: 16px;
                margin-bottom: 8px;
            }
        """)
        
        header_layout = QtWidgets.QHBoxLayout(header)
        header_layout.setContentsMargins(24, 16, 24, 16)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º
        text_layout = QtWidgets.QVBoxLayout()
        
        title = QtWidgets.QLabel("üèéÔ∏è Setup Expert")
        title.setStyleSheet("""
            QLabel {
                color: #1e1e2e;
                font-size: 28px;
                font-weight: bold;
                margin: 0;
            }
        """)
        
        subtitle = QtWidgets.QLabel("AI-powered car setup optimization for Le Mans Ultimate")
        subtitle.setStyleSheet("""
            QLabel {
                color: #1e1e2e;
                font-size: 14px;
                font-weight: normal;
                margin: 0;
                opacity: 0.8;
            }
        """)
        
        text_layout.addWidget(title)
        text_layout.addWidget(subtitle)
        text_layout.addStretch()
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_layout = QtWidgets.QHBoxLayout()
        stats_layout.setSpacing(16)
        
        cars_count = len(self.expert.get_available_cars()) if hasattr(self.expert, 'get_available_cars') else 12
        tracks_count = len(self.expert.get_available_tracks()) if hasattr(self.expert, 'get_available_tracks') else 8
        
        stats_layout.addWidget(self.create_stat_card("üöó", str(cars_count), "Cars"))
        stats_layout.addWidget(self.create_stat_card("üèÅ", str(tracks_count), "Tracks"))
        stats_layout.addWidget(self.create_stat_card("üéØ", "94%", "Accuracy"))
        
        header_layout.addLayout(text_layout, 2)
        header_layout.addLayout(stats_layout, 1)
        
        parent_layout.addWidget(header)

    def create_stat_card(self, icon, value, label):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        card = QtWidgets.QFrame()
        card.setFixedSize(80, 60)
        card.setStyleSheet("""
            QFrame {
                background: rgba(30, 30, 46, 0.8);
                border: 1px solid rgba(255, 255, 255, 0.2);
                border-radius: 8px;
                padding: 8px;
            }
        """)
        
        layout = QtWidgets.QVBoxLayout(card)
        layout.setContentsMargins(4, 4, 4, 4)
        layout.setSpacing(2)
        
        icon_label = QtWidgets.QLabel(icon)
        icon_label.setAlignment(QtCore.Qt.AlignCenter)
        icon_label.setStyleSheet("font-size: 16px; color: #1e1e2e;")
        
        value_label = QtWidgets.QLabel(value)
        value_label.setAlignment(QtCore.Qt.AlignCenter)
        value_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #1e1e2e;")
        
        label_label = QtWidgets.QLabel(label)
        label_label.setAlignment(QtCore.Qt.AlignCenter)
        label_label.setStyleSheet("font-size: 10px; color: #1e1e2e;")
        
        layout.addWidget(icon_label)
        layout.addWidget(value_label)
        layout.addWidget(label_label)
        
        return card

    def create_settings_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        group = QtWidgets.QGroupBox("‚öôÔ∏è Configuration")
        group.setFixedWidth(380)
        
        layout = QtWidgets.QVBoxLayout(group)
        layout.setSpacing(20)
        layout.setContentsMargins(20, 30, 20, 20)
        
        # –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        car_section = self.create_input_section("üèéÔ∏è Vehicle Selection", [
            ("Car Model:", self.create_car_combo()),
            ("Track:", self.create_track_combo())
        ])
        layout.addWidget(car_section)
        
        # –°–µ–∫—Ü–∏—è —É—Å–ª–æ–≤–∏–π –≥–æ–Ω–∫–∏
        conditions_section = self.create_conditions_section()
        layout.addWidget(conditions_section)
        
        # –°–µ–∫—Ü–∏—è –∫–Ω–æ–ø–æ–∫
        buttons_section = self.create_buttons_section()
        layout.addWidget(buttons_section)
        
        layout.addStretch()
        
        return group

    def create_car_combo(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–±–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        self.car_combo = QtWidgets.QComboBox()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏
        cars = ["üü¶ McLaren 720S LMGT3 Evo", "üü• Ferrari 296 LMGT3", "üü® Porsche 911 GT3 R", 
                "üü© Aston Martin Vantage AMR", "üüß BMW M4 LMGT3", "üü™ Lamborghini Hurac√°n LMGT3"]
        
        try:
            expert_cars = self.expert.get_available_cars()
            if expert_cars:
                cars = [f"üèéÔ∏è {car}" for car in expert_cars]
        except:
            pass
            
        self.car_combo.addItems(cars)
        return self.car_combo

    def create_track_combo(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–±–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞—Å—Å—ã"""
        self.track_combo = QtWidgets.QComboBox()
        
        tracks = ["üá´üá∑ Circuit de la Sarthe", "üáßüá™ Spa-Francorchamps", "üá¨üáß Silverstone", 
                  "üáÆüáπ Monza", "üá∫üá∏ Road America", "üáµüáπ Portim√£o"]
        
        try:
            expert_tracks = self.expert.get_available_tracks()
            if expert_tracks:
                tracks = [f"üèÅ {track}" for track in expert_tracks]
        except:
            pass
            
        self.track_combo.addItems(tracks)
        return self.track_combo

    def create_input_section(self, title, inputs):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Å –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞"""
        section = QtWidgets.QFrame()
        section.setStyleSheet("""
            QFrame {
                background-color: #45475a;
                border-radius: 12px;
                padding: 16px;
                margin: 4px;
            }
        """)
        
        layout = QtWidgets.QVBoxLayout(section)
        layout.setSpacing(12)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        section_title = QtWidgets.QLabel(title)
        section_title.setStyleSheet("""
            QLabel {
                color: #f9e2af;
                font-size: 15px;
                font-weight: bold;
                margin-bottom: 8px;
            }
        """)
        layout.addWidget(section_title)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        for label_text, widget in inputs:
            label = QtWidgets.QLabel(label_text)
            layout.addWidget(label)
            layout.addWidget(widget)
        
        return section

    def create_conditions_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —É—Å–ª–æ–≤–∏–π –≥–æ–Ω–∫–∏"""
        section = QtWidgets.QFrame()
        section.setStyleSheet("""
            QFrame {
                background-color: #45475a;
                border-radius: 12px;
                padding: 16px;
                margin: 4px;
            }
        """)
        
        layout = QtWidgets.QVBoxLayout(section)
        layout.setSpacing(12)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QtWidgets.QLabel("üå§Ô∏è Race Conditions")
        title.setStyleSheet("""
            QLabel {
                color: #f9e2af;
                font-size: 15px;
                font-weight: bold;
                margin-bottom: 8px;
            }
        """)
        layout.addWidget(title)
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        temp_layout = QtWidgets.QHBoxLayout()
        temp_label = QtWidgets.QLabel("üå°Ô∏è Temperature:")
        
        self.temp_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal)
        self.temp_slider.setRange(5, 45)
        self.temp_slider.setValue(25)
        
        self.temp_value = QtWidgets.QLabel("25¬∞C")
        self.temp_value.setStyleSheet("color: #f9e2af; font-weight: bold; min-width: 50px;")
        self.temp_slider.valueChanged.connect(lambda v: self.temp_value.setText(f"{v}¬∞C"))
        
        layout.addWidget(temp_label)
        temp_layout.addWidget(self.temp_slider)
        temp_layout.addWidget(self.temp_value)
        layout.addLayout(temp_layout)
        
        # –ü–æ–≥–æ–¥–∞
        layout.addWidget(QtWidgets.QLabel("‚òÅÔ∏è Weather:"))
        self.weather_combo = QtWidgets.QComboBox()
        self.weather_combo.addItems(["‚òÄÔ∏è Sunny", "‚õÖ Partly Cloudy", "üåßÔ∏è Rain", "‚õàÔ∏è Storm"])
        layout.addWidget(self.weather_combo)
        
        # –í—Ä–µ–º—è —Å—É—Ç–æ–∫
        layout.addWidget(QtWidgets.QLabel("üïê Time of Day:"))
        self.time_combo = QtWidgets.QComboBox()
        self.time_combo.addItems(["üåÖ Dawn", "‚òÄÔ∏è Day", "üåá Dusk", "üåô Night"])
        layout.addWidget(self.time_combo)
        
        return section

    def create_buttons_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫"""
        section = QtWidgets.QFrame()
        section.setStyleSheet("""
            QFrame {
                background: transparent;
                border: none;
            }
        """)
        
        layout = QtWidgets.QVBoxLayout(section)
        layout.setSpacing(12)
        
        # –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        self.analyze_btn = QtWidgets.QPushButton("üî¨ Analyze Setup")
        self.analyze_btn.setMinimumHeight(50)
        self.analyze_btn.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #89b4fa, stop:1 #cba6f7);
                color: #1e1e2e;
                border: none;
                border-radius: 12px;
                font-size: 16px;
                font-weight: bold;
                padding: 16px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #74c7ec, stop:1 #89b4fa);
                transform: translateY(-2px);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #94e2d5, stop:1 #74c7ec);
                transform: translateY(0px);
            }
        """)
        self.analyze_btn.clicked.connect(self.analyze_setup)
        layout.addWidget(self.analyze_btn)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        btn_layout = QtWidgets.QHBoxLayout()
        btn_layout.setSpacing(8)
        
        self.save_btn = QtWidgets.QPushButton("üíæ Save")
        self.export_btn = QtWidgets.QPushButton("üì§ Export")
        self.reset_btn = QtWidgets.QPushButton("üîÑ Reset")
        
        for btn in [self.save_btn, self.export_btn, self.reset_btn]:
            btn.setMinimumHeight(40)
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #6c7086;
                    color: #cdd6f4;
                    border: 1px solid #45475a;
                    border-radius: 8px;
                    font-size: 13px;
                    font-weight: 500;
                    padding: 8px 16px;
                }
                QPushButton:hover {
                    background-color: #7f849c;
                    border-color: #89b4fa;
                }
                QPushButton:pressed {
                    background-color: #5c5f77;
                }
            """)
        
        btn_layout.addWidget(self.save_btn)
        btn_layout.addWidget(self.export_btn)
        btn_layout.addWidget(self.reset_btn)
        layout.addLayout(btn_layout)
        
        return section

    def create_results_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        group = QtWidgets.QGroupBox("üìä Analysis Results")
        
        layout = QtWidgets.QVBoxLayout(group)
        layout.setContentsMargins(20, 30, 20, 20)
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
        self.results_text = QtWidgets.QTextEdit()
        self.results_text.setMinimumHeight(400)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = """
üöÄ Welcome to Setup Expert!

Follow these steps to optimize your car setup:

1Ô∏è‚É£ Select your vehicle and track
2Ô∏è‚É£ Configure race conditions (temperature, weather, time)
3Ô∏è‚É£ Click 'Analyze Setup' for AI-powered recommendations

The system will analyze:
‚Ä¢ Track characteristics and layout
‚Ä¢ Weather impact on aerodynamics
‚Ä¢ Temperature effects on tire performance
‚Ä¢ Optimal gear ratios and suspension settings

üéØ Get ready for faster lap times and better consistency!
        """
        
        self.results_text.setPlainText(welcome_text)
        layout.addWidget(self.results_text)
        
        return group

    def analyze_setup(self):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        try:
            # –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
            self.analyze_btn.setText("üîÑ Analyzing...")
            self.analyze_btn.setEnabled(False)
            QtWidgets.QApplication.processEvents()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            car = self.car_combo.currentText()
            track = self.track_combo.currentText()
            temperature = self.temp_slider.value()
            weather = self.weather_combo.currentText()
            time_of_day = self.time_combo.currentText()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            self.show_analysis_progress()
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∞–Ω–∞–ª–∏–∑–∞
            import time
            time.sleep(1.5)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.show_results(car, track, temperature, weather, time_of_day)
            
        except Exception as e:
            self.results_text.setPlainText(f"‚ùå Error during analysis: {str(e)}")
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            self.analyze_btn.setText("üî¨ Analyze Setup")
            self.analyze_btn.setEnabled(True)

    def show_analysis_progress(self):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        progress_text = """
üî¨ ANALYZING SETUP...

‚ö° Processing track data...
üß† Running AI optimization algorithms...
üìä Calculating optimal parameters...
üéØ Generating recommendations...

Please wait while we optimize your setup for maximum performance!
        """
        self.results_text.setPlainText(progress_text)
        QtWidgets.QApplication.processEvents()

    def show_results(self, car, track, temperature, weather, time_of_day):
        """–ü–æ–∫–∞–∑ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        results = f"""
‚úÖ SETUP ANALYSIS COMPLETE

üèÅ CONFIGURATION
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üèéÔ∏è Car: {car}
üó∫Ô∏è Track: {track}
üå°Ô∏è Temperature: {temperature}¬∞C
‚òÅÔ∏è Weather: {weather}
üïê Time: {time_of_day}

üîß RECOMMENDED ADJUSTMENTS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª–æ–≤–∏–π
        if "rain" in weather.lower() or "storm" in weather.lower():
            results += """
‚ñ≤ Front Wing: +2.5 (increased downforce for wet conditions)
‚ñ≤ Rear Wing: +1.8 (better stability in rain)
‚ñº Tire Pressure: -1.2 PSI (larger contact patch)
‚ñ≤ Ride Height: +5mm (avoid aquaplaning)
‚óÄ Brake Bias: -3% (prevent rear lockup)
"""
        else:
            results += """
‚ñº Front Wing: -1.2 (reduced drag for better top speed)
‚ñ≤ Rear Wing: +0.8 (balance aerodynamics)
‚ñ≤ Tire Pressure: +0.5 PSI (optimal temperature management)
‚ñº Suspension: -5% stiffness (better mechanical grip)
‚ñ∂ Brake Bias: +2% (improved braking efficiency)
"""
        
        if temperature > 35:
            results += "üî• Cooling: Increase radiator opening (+15%)\n"
        elif temperature < 15:
            results += "‚ùÑÔ∏è Warm-up: Tire blankets recommended\n"
        
        results += f"""

üí° EXPERT INSIGHTS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚Ä¢ Setup optimized for current weather conditions
‚Ä¢ Aerodynamics balanced for this track layout
‚Ä¢ Suspension tuned for optimal tire wear
‚Ä¢ Brake balance adjusted for driver confidence

üéØ PERFORMANCE PREDICTION
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Expected lap time improvement: 0.8-1.2 seconds
Tire degradation: Reduced by 15%
Confidence level: 92%

üèÜ Ready to hit the track with your optimized setup!
        """
        
        self.results_text.setPlainText(results)
