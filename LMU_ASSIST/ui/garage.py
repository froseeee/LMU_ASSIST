from PyQt5 import QtWidgets, QtCore
from core.setupexpert import SetupExpert
import json
from pathlib import Path

class GarageTab(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__()
        self.parent_window = parent
        self.layout = QtWidgets.QVBoxLayout()
        self.setLayout(self.layout)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ LMU
        data_file = Path("data/lmu_data.json")
        
        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
        if data_file.exists():
            try:
                # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = data_file.stat().st_size
                print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ lmu_data.json: {file_size} –±–∞–π—Ç")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                import json
                with open(data_file, 'r', encoding='utf-8') as f:
                    test_data = json.load(f)
                
                print(f"–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(test_data.get('cars', {}))}")
                print(f"–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞—Å—Å: {len(test_data.get('tracks', {}))}")
                print(f"–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {list(test_data.get('cars', {}).keys())}")
                print(f"–°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Å—Å: {list(test_data.get('tracks', {}).keys())}")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        else:
            print("‚ùå –§–∞–π–ª data/lmu_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

        self.expert = SetupExpert(str(data_file) if data_file.exists() else None)
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ expert –∑–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ
        available_cars = self.expert.get_available_cars()
        available_tracks = self.expert.get_available_tracks()
        
        print(f"Expert –∑–∞–≥—Ä—É–∑–∏–ª –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(available_cars)}")
        print(f"Expert –∑–∞–≥—Ä—É–∑–∏–ª —Ç—Ä–∞—Å—Å: {len(available_tracks)}")

        self.init_ui()

    def init_ui(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QtWidgets.QLabel("üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        title.setStyleSheet("font-size: 18px; font-weight: bold; margin: 10px;")
        self.layout.addWidget(title)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
        selectors_layout = QtWidgets.QHBoxLayout()
        
        # –í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        car_group = QtWidgets.QGroupBox("–ê–≤—Ç–æ–º–æ–±–∏–ª—å")
        car_layout = QtWidgets.QVBoxLayout()
        self.car_selector = QtWidgets.QComboBox()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω
        available_cars = self.expert.get_available_cars()
        print(f"–î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–±–æ–±–æ–∫—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {available_cars}")
        self.car_selector.addItems(available_cars)
        self.car_selector.currentTextChanged.connect(self.on_car_changed)
        
        car_layout.addWidget(self.car_selector)
        car_group.setLayout(car_layout)
        
        # –í—ã–±–æ—Ä —Ç—Ä–∞—Å—Å—ã
        track_group = QtWidgets.QGroupBox("–¢—Ä–∞—Å—Å–∞")
        track_layout = QtWidgets.QVBoxLayout()
        self.track_selector = QtWidgets.QComboBox()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞—Å—Å
        available_tracks = self.expert.get_available_tracks()
        print(f"–î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–±–æ–±–æ–∫—Å —Ç—Ä–∞—Å—Å: {available_tracks}")
        self.track_selector.addItems(available_tracks)
        self.track_selector.currentTextChanged.connect(self.on_track_changed)
        
        track_layout.addWidget(self.track_selector)
        track_group.setLayout(track_layout)
        
        selectors_layout.addWidget(car_group)
        selectors_layout.addWidget(track_group)
        self.layout.addLayout(selectors_layout)

        # –£—Å–ª–æ–≤–∏—è –≥–æ–Ω–∫–∏
        conditions_group = QtWidgets.QGroupBox("–£—Å–ª–æ–≤–∏—è –≥–æ–Ω–∫–∏")
        conditions_layout = QtWidgets.QGridLayout()
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        conditions_layout.addWidget(QtWidgets.QLabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C):"), 0, 0)
        self.temp_spinbox = QtWidgets.QSpinBox()
        self.temp_spinbox.setRange(-10, 60)
        self.temp_spinbox.setValue(25)
        conditions_layout.addWidget(self.temp_spinbox, 0, 1)
        
        # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–Ω–∫–∏
        conditions_layout.addWidget(QtWidgets.QLabel("–¢–∏–ø –≥–æ–Ω–∫–∏:"), 1, 0)
        self.race_type = QtWidgets.QComboBox()
        self.race_type.addItems(["6_hour", "24_hour", "sprint"])
        conditions_layout.addWidget(self.race_type, 1, 1)
        
        # –ü–æ–≥–æ–¥–∞
        conditions_layout.addWidget(QtWidgets.QLabel("–ü–æ–≥–æ–¥–∞:"), 0, 2)
        self.weather_selector = QtWidgets.QComboBox()
        self.weather_selector.addItems(["dry", "light_rain", "heavy_rain"])
        conditions_layout.addWidget(self.weather_selector, 0, 3)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å—Ç–∏–Ω—Ç–æ–≤
        conditions_layout.addWidget(QtWidgets.QLabel("–°—Ç–∏–Ω—Ç—ã:"), 1, 2)
        self.stint_strategy = QtWidgets.QComboBox()
        self.stint_strategy.addItems(["short", "medium", "long"])
        conditions_layout.addWidget(self.stint_strategy, 1, 3)
        
        conditions_group.setLayout(conditions_layout)
        self.layout.addWidget(conditions_group)

        # –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)
        telemetry_group = QtWidgets.QGroupBox("–ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –ø–∏–ª–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        telemetry_layout = QtWidgets.QGridLayout()
        
        # –°—Ç–∏–ª—å —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—è
        telemetry_layout.addWidget(QtWidgets.QLabel("–°—Ç–∏–ª—å —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—è:"), 0, 0)
        self.brake_style = QtWidgets.QComboBox()
        self.brake_style.addItems(["normal", "aggressive", "late"])
        telemetry_layout.addWidget(self.brake_style, 0, 1)
        
        # –ë–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        telemetry_layout.addWidget(QtWidgets.QLabel("–ë–∞–ª–∞–Ω—Å:"), 0, 2)
        self.balance_selector = QtWidgets.QComboBox()
        self.balance_selector.addItems(["neutral", "understeer", "oversteer"])
        telemetry_layout.addWidget(self.balance_selector, 0, 3)
        
        telemetry_group.setLayout(telemetry_layout)
        self.layout.addWidget(telemetry_group)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.result_area = QtWidgets.QTextBrowser()
        self.result_area.setMinimumHeight(250)
        self.layout.addWidget(self.result_area)

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QtWidgets.QHBoxLayout()
        
        self.optimize_button = QtWidgets.QPushButton("üîß –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        self.optimize_button.setMinimumHeight(40)
        self.optimize_button.clicked.connect(self.run_optimization)
        buttons_layout.addWidget(self.optimize_button)
        
        self.clear_button = QtWidgets.QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_button.setMinimumHeight(40)
        self.clear_button.clicked.connect(self.clear_results)
        buttons_layout.addWidget(self.clear_button)
        
        self.layout.addLayout(buttons_layout)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        self.load_car_info()

    def on_car_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        self.load_car_info()

    def on_track_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ç—Ä–∞—Å—Å—ã"""
        self.load_track_info()

    def load_car_info(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""
        car_type = self.car_selector.currentText()
        if not car_type:
            return
            
        try:
            car_specs = self.expert.get_car_specifications(car_type)
            if 'error' not in car_specs:
                info_html = f"""
                <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:</h4>
                <p><b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {car_specs.get('name', 'N/A')}</p>
                <p><b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {car_specs.get('category', 'N/A')}</p>
                <p><b>–ú–æ—â–Ω–æ—Å—Ç—å:</b> {car_specs.get('power', 'N/A')} –ª.—Å.</p>
                <p><b>–í–µ—Å:</b> {car_specs.get('weight', 'N/A')} –∫–≥</p>
                <p><b>–ü—Ä–∏–≤–æ–¥:</b> {car_specs.get('drivetrain', 'N/A')}</p>
                """
                
                if car_specs.get('hybrid_system'):
                    info_html += "<p><b>–ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b> –î–∞</p>"
                
                if car_specs.get('free_car'):
                    info_html += "<p><b>üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–∞—à–∏–Ω–∞</b></p>"
                
                self.result_area.setHtml(info_html)
            else:
                self.result_area.setHtml(f"<p style='color: red;'>{car_specs['error']}</p>")
        except Exception as e:
            self.result_area.setHtml(f"<p style='color: red;'>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}</p>")

    def load_track_info(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞—Å—Å–µ"""
        track_name = self.track_selector.currentText()
        if not track_name:
            return
            
        try:
            track_info = self.expert.get_track_recommendations(track_name)
            if 'error' not in track_info:
                info_html = f"""
                <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞—Å—Å–µ:</h4>
                <p><b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {track_info.get('name', 'N/A')}</p>
                <p><b>–î–ª–∏–Ω–∞:</b> {track_info.get('length', 'N/A')} –∫–º</p>
                <p><b>–•–∞—Ä–∞–∫—Ç–µ—Ä:</b> {', '.join(track_info.get('characteristics', []))}</p>
                <p><b>–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b> {track_info.get('weather_tendency', 'N/A')}</p>
                """
                self.result_area.setHtml(info_html)
            else:
                # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞—Å—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
                self.load_car_info()
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            self.load_car_info()

    def run_optimization(self):
        """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —É—Å–ª–æ–≤–∏—è
            conditions = {
                "temperature": self.temp_spinbox.value(),
                "race_duration": self.race_type.currentText(),
                "track": self.track_selector.currentText(),
                "weather": self.weather_selector.currentText(),
                "stint_strategy": self.stint_strategy.currentText()
            }
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è
            brake_style = self.brake_style.currentText()
            balance = self.balance_selector.currentText()
            
            telemetry = {
                "brake_avg": 0.95 if brake_style == "aggressive" else (0.75 if brake_style == "late" else 0.85),
                "brake_tendency": brake_style,
                "throttle_exit": 0.88,
                "steering_smoothness": 0.75,
                "balance": balance
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –≥–∏–ø–µ—Ä–∫–∞—Ä–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            car_type = self.car_selector.currentText()
            if "hypercar" in car_type:
                telemetry.update({
                    "hybrid_efficiency": 0.8,
                    "fuel_consumption": 1.0
                })
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            track_name = self.track_selector.currentText()
            
            recommendations = self.expert.recommend_setup(
                conditions, telemetry, car_type, track_name
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.display_recommendations(recommendations)
            
        except Exception as e:
            self.result_area.setHtml(f"<p style='color: red;'>–û—à–∏–±–∫–∞: {e}</p>")

    def display_recommendations(self, recommendations):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        adjustments = recommendations.get("adjustments", {})
        explanations = recommendations.get("explanations", [])
        confidence = recommendations.get("confidence", 0)
        car_type = recommendations.get("car_type", "")
        track_name = recommendations.get("track_name", "")
        
        html = f"""
        <div style="font-family: Arial, sans-serif;">
        <h3>üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ</h3>
        <p><b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {car_type}</p>
        <p><b>–¢—Ä–∞—Å—Å–∞:</b> {track_name}</p>
        <p><b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> <span style="color: {'green' if confidence > 0.7 else 'orange' if confidence > 0.5 else 'red'};">{confidence:.1%}</span></p>
        
        <h4>üìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:</h4>
        """
        
        if adjustments:
            html += "<table border='1' style='border-collapse: collapse; width: 100%;'>"
            html += "<tr style='background-color: #f0f0f0;'><th>–ü–∞—Ä–∞–º–µ—Ç—Ä</th><th>–ò–∑–º–µ–Ω–µ–Ω–∏–µ</th><th>–û–ø–∏—Å–∞–Ω–∏–µ</th></tr>"
            
            for param, value in adjustments.items():
                color = "green" if value > 0 else "red" if value < 0 else "gray"
                direction = "‚Üë" if value > 0 else "‚Üì" if value < 0 else "‚Üí"
                
                # –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                descriptions = {
                    "front_wing": "–ü–µ—Ä–µ–¥–Ω–∏–π –∞–Ω—Ç–∏–∫—Ä—ã–ª–æ",
                    "rear_wing": "–ó–∞–¥–Ω–µ–µ –∞–Ω—Ç–∏–∫—Ä—ã–ª–æ", 
                    "tire_pressure_front": "–î–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–Ω–∏—Ö —à–∏–Ω",
                    "tire_pressure_rear": "–î–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–Ω–∏—Ö —à–∏–Ω",
                    "brake_bias": "–ë–∞–ª–∞–Ω—Å —Ç–æ—Ä–º–æ–∑–æ–≤",
                    "front_spring": "–ü–µ—Ä–µ–¥–Ω–∏–µ –ø—Ä—É–∂–∏–Ω—ã",
                    "rear_spring": "–ó–∞–¥–Ω–∏–µ –ø—Ä—É–∂–∏–Ω—ã",
                    "differential_power": "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª (—Ç—è–≥–∞)",
                    "differential_coast": "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª (–Ω–∞–∫–∞—Ç)",
                    "hybrid_deployment": "–†–µ–∂–∏–º –≥–∏–±—Ä–∏–¥–∞"
                }
                
                description = descriptions.get(param, param.replace("_", " ").title())
                
                html += f"""
                <tr>
                    <td><b>{description}</b></td>
                    <td style='color: {color}; text-align: center;'>{direction} {abs(value):.1f}</td>
                    <td style='font-size: 12px;'>{"–£–≤–µ–ª–∏—á–∏—Ç—å" if value > 0 else "–£–º–µ–Ω—å—à–∏—Ç—å" if value < 0 else "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"}</td>
                </tr>
                """
            
            html += "</table>"
        else:
            html += "<p><i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π</i></p>"
        
        html += "<h4>üí° –û–±—ä—è—Å–Ω–µ–Ω–∏—è:</h4><ul>"
        
        for explanation in explanations:
            html += f"<li>{explanation}</li>"
        
        if not explanations:
            html += "<li>–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π</li>"
        
        html += "</ul></div>"
        
        self.result_area.setHtml(html)

    def clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.load_car_info()