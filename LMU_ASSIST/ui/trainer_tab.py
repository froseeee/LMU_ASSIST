from PyQt5 import QtWidgets, QtCore, QtGui
from core.trainer_engine import TrainerEngine, LapAnalysis
import json

class TrainerTab(QtWidgets.QWidget):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    def __init__(self, parent=None):
        super().__init__()
        self.parent = parent
        self.trainer = TrainerEngine()
        self.current_analysis = None
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QtWidgets.QHBoxLayout()
        self.setLayout(layout)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_panel = self.create_control_panel()
        layout.addWidget(left_panel)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - –∞–Ω–∞–ª–∏–∑
        center_panel = self.create_analysis_panel()
        layout.addWidget(center_panel, 2)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        right_panel = self.create_recommendations_panel()
        layout.addWidget(right_panel)
    
    def create_control_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        panel = QtWidgets.QGroupBox("üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–æ–º")
        panel.setMaximumWidth(300)
        panel.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #555555;
                border-radius: 5px;
                margin: 5px;
                padding-top: 15px;
                color: #ffffff;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #0078d4;
            }
        """)
        
        layout = QtWidgets.QVBoxLayout(panel)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—Ä—É–≥–∞
        load_label = QtWidgets.QLabel("–î–∞–Ω–Ω—ã–µ –∫—Ä—É–≥–∞:")
        load_label.setStyleSheet("font-weight: bold; color: #cccccc;")
        layout.addWidget(load_label)
        
        load_buttons_layout = QtWidgets.QHBoxLayout()
        
        self.load_telemetry_btn = QtWidgets.QPushButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é")
        self.load_reference_btn = QtWidgets.QPushButton("‚≠ê –ó–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–∞–ª–æ–Ω")
        
        button_style = """
            QPushButton {
                background-color: #4a4a4a;
                border: 1px solid #555555;
                border-radius: 3px;
                padding: 6px;
                color: #ffffff;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #5a5a5a;
            }
            QPushButton:pressed {
                background-color: #0078d4;
            }
        """
        
        self.load_telemetry_btn.setStyleSheet(button_style)
        self.load_reference_btn.setStyleSheet(button_style)
        
        load_buttons_layout.addWidget(self.load_telemetry_btn)
        load_buttons_layout.addWidget(self.load_reference_btn)
        layout.addLayout(load_buttons_layout)
        
        # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_data_label = QtWidgets.QLabel("–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
        current_data_label.setStyleSheet("font-weight: bold; color: #cccccc; margin-top: 10px;")
        layout.addWidget(current_data_label)
        
        self.current_data_info = QtWidgets.QTextBrowser()
        self.current_data_info.setMaximumHeight(150)
        self.current_data_info.setStyleSheet("""
            QTextBrowser {
                background-color: #2b2b2b;
                border: 1px solid #555555;
                border-radius: 4px;
                color: #ffffff;
                padding: 5px;
            }
        """)
        self.current_data_info.setHtml("""
            <p style="color: #cccccc;">–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</p>
            <p><small>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</small></p>
        """)
        layout.addWidget(self.current_data_info)
        
        # –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
        analysis_label = QtWidgets.QLabel("–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:")
        analysis_label.setStyleSheet("font-weight: bold; color: #cccccc; margin-top: 10px;")
        layout.addWidget(analysis_label)
        
        self.analysis_type = QtWidgets.QComboBox()
        self.analysis_type.setStyleSheet("""
            QComboBox {
                background-color: #3c3c3c;
                border: 1px solid #555555;
                border-radius: 3px;
                padding: 5px;
                color: #ffffff;
            }
        """)
        
        analysis_types = [
            "–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä—É–≥–∞",
            "–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏–∫–∏ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—è",
            "–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏–∫–∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è",
            "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏",
            "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º"
        ]
        
        for analysis_type in analysis_types:
            self.analysis_type.addItem(analysis_type)
        
        layout.addWidget(self.analysis_type)
        
        # –ö–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
        analysis_buttons_layout = QtWidgets.QVBoxLayout()
        
        self.analyze_btn = QtWidgets.QPushButton("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
        self.analyze_btn.setStyleSheet("""
            QPushButton {
                background-color: #0078d4;
                border: none;
                border-radius: 4px;
                padding: 10px;
                color: #ffffff;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #106ebe;
            }
            QPushButton:pressed {
                background-color: #005a9e;
            }
        """)
        
        self.generate_plan_btn = QtWidgets.QPushButton("üìã –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        self.save_analysis_btn = QtWidgets.QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
        
        for btn in [self.generate_plan_btn, self.save_analysis_btn]:
            btn.setStyleSheet(button_style)
        
        analysis_buttons_layout.addWidget(self.analyze_btn)
        analysis_buttons_layout.addWidget(self.generate_plan_btn)
        analysis_buttons_layout.addWidget(self.save_analysis_btn)
        
        layout.addLayout(analysis_buttons_layout)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.load_telemetry_btn.clicked.connect(self.load_telemetry)
        self.load_reference_btn.clicked.connect(self.load_reference)
        self.analyze_btn.clicked.connect(self.run_analysis)
        self.generate_plan_btn.clicked.connect(self.generate_training_plan)
        self.save_analysis_btn.clicked.connect(self.save_analysis)
        
        layout.addStretch()
        return panel
    
    def create_analysis_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        panel = QtWidgets.QGroupBox("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        panel.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #555555;
                border-radius: 5px;
                margin: 5px;
                padding-top: 15px;
                color: #ffffff;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #0078d4;
            }
        """)
        
        layout = QtWidgets.QVBoxLayout(panel)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_tabs = QtWidgets.QTabWidget()
        self.analysis_tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #555555;
                background-color: #2b2b2b;
            }
            QTabBar::tab {
                background-color: #4a4a4a;
                color: #ffffff;
                padding: 8px 12px;
                margin: 1px;
                border-radius: 3px;
            }
            QTabBar::tab:selected {
                background-color: #0078d4;
            }
        """)
        
        # –í–∫–ª–∞–¥–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.main_analysis = QtWidgets.QTextBrowser()
        self.main_analysis.setStyleSheet("""
            QTextBrowser {
                background-color: #2b2b2b;
                border: 1px solid #555555;
                border-radius: 4px;
                color: #ffffff;
                padding: 15px;
            }
        """)
        self.main_analysis.setHtml("""
            <h2 style="color: #0078d4;">üèÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–Ω–µ—Ä!</h2>
            <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ —Å—Ç–∏–ª—è –≤–æ–∂–¥–µ–Ω–∏—è.</p>
            
            <h3 style="color: #ffa500;">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞:</h3>
            <ul>
                <li><b>–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –∫—Ä—É–≥–∞</b> - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º</li>
                <li><b>–¢–µ—Ö–Ω–∏–∫–∞ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—è</b> - –ø–ª–∞–≤–Ω–æ—Å—Ç—å –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</li>
                <li><b>–¢–µ—Ö–Ω–∏–∫–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è</b> - —Ç–æ—á–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–∞–∑–∞</li>
                <li><b>–†—É–ª–µ–∂–∫–∞</b> - –ø–ª–∞–≤–Ω–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å</li>
                <li><b>–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å</b> - —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω</li>
            </ul>
            
            <h3 style="color: #ffa500;">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</h3>
            <ul>
                <li>JSON —Ñ–∞–π–ª—ã —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏</li>
                <li>CSV —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∫—Ä—É–≥–æ–≤</li>
                <li>–§–∞–π–ª—ã —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤ (LMU, ACC, F1)</li>
            </ul>
        """)
        self.analysis_tabs.addTab(self.main_analysis, "üìà –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑")
        
        # –í–∫–ª–∞–¥–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.detailed_analysis = QtWidgets.QTextBrowser()
        self.detailed_analysis.setStyleSheet(self.main_analysis.styleSheet())
        self.detailed_analysis.setHtml("<p>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.</p>")
        self.analysis_tabs.addTab(self.detailed_analysis, "üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        self.comparison_analysis = QtWidgets.QTextBrowser()
        self.comparison_analysis.setStyleSheet(self.main_analysis.styleSheet())
        self.comparison_analysis.setHtml("<p>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∫—Ä—É–≥–∞.</p>")
        self.analysis_tabs.addTab(self.comparison_analysis, "‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ")
        
        layout.addWidget(self.analysis_tabs)
        return panel
    
    def create_recommendations_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        panel = QtWidgets.QGroupBox("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø–ª–∞–Ω")
        panel.setMaximumWidth(350)
        panel.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #555555;
                border-radius: 5px;
                margin: 5px;
                padding-top: 15px;
                color: #ffffff;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #0078d4;
            }
        """)
        
        layout = QtWidgets.QVBoxLayout(panel)
        
        # –ë—ã—Å—Ç—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        quick_recs_label = QtWidgets.QLabel("‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Å–æ–≤–µ—Ç—ã:")
        quick_recs_label.setStyleSheet("font-weight: bold; color: #ffa500;")
        layout.addWidget(quick_recs_label)
        
        self.quick_recommendations = QtWidgets.QTextBrowser()
        self.quick_recommendations.setMaximumHeight(200)
        self.quick_recommendations.setStyleSheet("""
            QTextBrowser {
                background-color: #2b2b2b;
                border: 1px solid #555555;
                border-radius: 4px;
                color: #ffffff;
                padding: 10px;
            }
        """)
        self.quick_recommendations.setHtml("""
            <ul>
                <li>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤</li>
                <li>–°—Ä–∞–≤–Ω–∏—Ç–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∫—Ä—É–≥–æ–º</li>
                <li>–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏</li>
                <li>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞–∂–¥—ã–π —Å–µ–∫—Ç–æ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ</li>
            </ul>
        """)
        layout.addWidget(self.quick_recommendations)
        
        # –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        training_plan_label = QtWidgets.QLabel("üìã –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:")
        training_plan_label.setStyleSheet("font-weight: bold; color: #ffa500; margin-top: 10px;")
        layout.addWidget(training_plan_label)
        
        self.training_plan = QtWidgets.QTextBrowser()
        self.training_plan.setStyleSheet("""
            QTextBrowser {
                background-color: #2b2b2b;
                border: 1px solid #555555;
                border-radius: 4px;
                color: #ffffff;
                padding: 10px;
            }
        """)
        self.training_plan.setHtml("""
            <p>–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.</p>
            <p><small>–ù–∞–∂–º–∏—Ç–µ '–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫' –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞</small></p>
        """)
        layout.addWidget(self.training_plan)
        
        return panel
    
    def load_telemetry(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏"""
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é", "", 
            "JSON files (*.json);;CSV files (*.csv);;All files (*)"
        )
        
        if file_path:
            try:
                # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–∫ JSON
                with open(file_path, 'r', encoding='utf-8') as f:
                    if file_path.endswith('.json'):
                        self.current_telemetry = json.load(f)
                    else:
                        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CSV (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
                        import csv
                        reader = csv.DictReader(f)
                        self.current_telemetry = list(reader)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                self.update_current_data_info()
                
                QtWidgets.QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                
            except Exception as e:
                QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {e}")
    
    def load_reference(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∫—Ä—É–≥–∞"""
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "–ó–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–∞–ª–æ–Ω", "",
            "JSON files (*.json);;CSV files (*.csv);;All files (*)"
        )
        
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    if file_path.endswith('.json'):
                        self.reference_lap = json.load(f)
                    else:
                        import csv
                        reader = csv.DictReader(f)
                        self.reference_lap = list(reader)[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                
                QtWidgets.QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–≠—Ç–∞–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω!")
                
            except Exception as e:
                QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–∞–ª–æ–Ω: {e}")
    
    def update_current_data_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if hasattr(self, 'current_telemetry') and self.current_telemetry:
            if isinstance(self.current_telemetry, dict):
                # JSON —Ñ–æ—Ä–º–∞—Ç
                lap_time = self.current_telemetry.get('lap_time', 'N/A')
                sectors = self.current_telemetry.get('sector_times', [])
                
                info_html = f"""
                <h4 style="color: #0078d4;">–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</h4>
                <p><b>–í—Ä–µ–º—è –∫—Ä—É–≥–∞:</b> {lap_time}</p>
                <p><b>–°–µ–∫—Ç–æ—Ä—ã:</b> {len(sectors)}</p>
                """
                
                if 'track' in self.current_telemetry:
                    info_html += f"<p><b>–¢—Ä–∞—Å—Å–∞:</b> {self.current_telemetry['track']}</p>"
                if 'car' in self.current_telemetry:
                    info_html += f"<p><b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {self.current_telemetry['car']}</p>"
                
            else:
                # CSV —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫
                info_html = f"""
                <h4 style="color: #0078d4;">–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</h4>
                <p><b>–ó–∞–ø–∏—Å–µ–π:</b> {len(self.current_telemetry)}</p>
                <p><b>–§–æ—Ä–º–∞—Ç:</b> CSV/–°–ø–∏—Å–æ–∫</p>
                """
            
            self.current_data_info.setHtml(info_html)
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        if not hasattr(self, 'current_telemetry'):
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏!")
            return
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            lap_data = self.prepare_lap_data()
            reference_lap = getattr(self, 'reference_lap', None)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            self.current_analysis = self.trainer.analyze_lap(lap_data, reference_lap)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.display_analysis_results()
            
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    def prepare_lap_data(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        if isinstance(self.current_telemetry, dict):
            return self.current_telemetry
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π CSV, –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
            return {
                'lap_time': 90.0,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
                'sector_times': [30.0, 30.0, 30.0],
                'brake_history': [float(r.get('brake', 0)) for r in self.current_telemetry[:100]],
                'throttle_history': [float(r.get('throttle', 0)) for r in self.current_telemetry[:100]],
                'steering_history': [float(r.get('steering', 0)) for r in self.current_telemetry[:100]]
            }
    
    def display_analysis_results(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        if not self.current_analysis:
            return
        
        analysis = self.current_analysis
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
        main_html = f"""
        <h2 style="color: #0078d4;">üìä –ê–Ω–∞–ª–∏–∑ –∫—Ä—É–≥–∞</h2>
        
        <h3 style="color: #ffa500;">–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h3>
        <p><b>–í—Ä–µ–º—è –∫—Ä—É–≥–∞:</b> {analysis.lap_time:.3f} —Å–µ–∫</p>
        <p><b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —É–ª—É—á—à–µ–Ω–∏—è:</b> {analysis.improvement_potential:.3f} —Å–µ–∫</p>
        
        <h3 style="color: #ffa500;">–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:</h3>
        """
        
        if analysis.strengths:
            main_html += "<ul>"
            for strength in analysis.strengths:
                main_html += f"<li style='color: #4ecdc4;'>‚úÖ {strength}</li>"
            main_html += "</ul>"
        else:
            main_html += "<p>–ù–µ –≤—ã—è–≤–ª–µ–Ω–æ</p>"
        
        main_html += "<h3 style='color: #ffa500;'>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏:</h3>"
        
        if analysis.issues:
            main_html += "<ul>"
            for issue in analysis.issues:
                main_html += f"<li style='color: #ff6b6b;'>‚ùå {issue}</li>"
            main_html += "</ul>"
        else:
            main_html += "<p style='color: #4ecdc4;'>–ü—Ä–æ–±–ª–µ–º –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ!</p>"
        
        self.main_analysis.setHtml(main_html)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        detailed_html = f"""
        <h2 style="color: #0078d4;">üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h2>
        
        <h3 style="color: #ffa500;">–í—Ä–µ–º–µ–Ω–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤:</h3>
        """
        
        if analysis.sector_times:
            detailed_html += "<table style='width: 100%; border-collapse: collapse;'>"
            detailed_html += "<tr style='background-color: #3c3c3c;'><th>–°–µ–∫—Ç–æ—Ä</th><th>–í—Ä–µ–º—è</th></tr>"
            for i, sector_time in enumerate(analysis.sector_times, 1):
                detailed_html += f"<tr><td>–°–µ–∫—Ç–æ—Ä {i}</td><td>{sector_time:.3f} —Å–µ–∫</td></tr>"
            detailed_html += "</table>"
        
        detailed_html += "<h3 style='color: #ffa500;'>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3><ul>"
        for recommendation in analysis.recommendations:
            detailed_html += f"<li>{recommendation}</li>"
        detailed_html += "</ul>"
        
        self.detailed_analysis.setHtml(detailed_html)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        quick_html = "<h4 style='color: #0078d4;'>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:</h4><ul>"
        for i, rec in enumerate(analysis.recommendations[:3], 1):
            quick_html += f"<li><b>{i}.</b> {rec}</li>"
        quick_html += "</ul>"
        
        self.quick_recommendations.setHtml(quick_html)
    
    def generate_training_plan(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        if not self.current_analysis:
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑!")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        training_plan = self.trainer.generate_training_plan([self.current_analysis])
        
        plan_html = f"""
        <h3 style="color: #0078d4;">üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</h3>
        
        <p><b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏:</b> {training_plan.get('recommended_session_time', '45-60 –º–∏–Ω—É—Ç')}</p>
        
        <h4 style="color: #ffa500;">–û–±–ª–∞—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞:</h4>
        <ul>
        """
        
        for area in training_plan.get('focus_areas', []):
            plan_html += f"<li>{area}</li>"
        
        plan_html += "</ul><h4 style='color: #ffa500;'>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:</h4>"
        
        for exercise in training_plan.get('plan', []):
            plan_html += f"""
            <div style='margin-bottom: 15px; padding: 10px; background-color: #3c3c3c; border-radius: 5px;'>
                <h5 style='color: #4ecdc4; margin: 0;'>{exercise.get('area', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')}</h5>
                <p style='margin: 5px 0;'><b>–í—Ä–µ–º—è:</b> {exercise.get('duration', 'N/A')}</p>
                <ul style='margin: 5px 0;'>
            """
            
            for ex in exercise.get('exercises', []):
                plan_html += f"<li>{ex}</li>"
            
            plan_html += "</ul></div>"
        
        self.training_plan.setHtml(plan_html)
    
    def save_analysis(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
        if not self.current_analysis:
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return
        
        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑", "", "JSON files (*.json);;All files (*)"
        )
        
        if file_path:
            try:
                self.trainer.save_analysis(self.current_analysis, file_path)
                QtWidgets.QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            except Exception as e:
                QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")
