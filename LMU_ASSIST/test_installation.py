#!/usr/bin/env python3
"""–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ LMU Assistant"""

import sys
from pathlib import Path

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from core.config_manager import ConfigManager
        print("‚úÖ ConfigManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from core.telemetry_receiver import TelemetryReceiver
        print("‚úÖ TelemetryReceiver –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from core.telemetry_buffer import TelemetryBuffer
        print("‚úÖ TelemetryBuffer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from core.setupexpert import SetupExpert
        print("‚úÖ SetupExpert –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from overlay.overlay_hud import OverlayHUD
        print("‚úÖ OverlayHUD –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_data_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    data_file = Path("data/lmu_data.json")
    if data_file.exists():
        print("‚úÖ data/lmu_data.json –Ω–∞–π–¥–µ–Ω")
        try:
            import json
            with open(data_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            print(f"‚úÖ JSON –≤–∞–ª–∏–¥–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(data.get('cars', {}))} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ {len(data.get('tracks', {}))} —Ç—Ä–∞—Å—Å")
            return True
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ JSON: {e}")
            return False
    else:
        print("‚ùå data/lmu_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def test_directories():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    dirs = ["config", "logs", "assets", "data"]
    all_ok = True
    
    for dir_name in dirs:
        dir_path = Path(dir_name)
        if dir_path.exists():
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            all_ok = False
    
    return all_ok

def test_config():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from core.config_manager import ConfigManager
        config = ConfigManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_files = [
            "config/main.json",
            "config/telemetry.json", 
            "config/ui.json",
            "config/overlay.json"
        ]
        
        all_ok = True
        for config_file in config_files:
            if Path(config_file).exists():
                print(f"‚úÖ {config_file} —Å–æ–∑–¥–∞–Ω")
            else:
                print(f"‚ùå {config_file} –Ω–µ —Å–æ–∑–¥–∞–Ω")
                all_ok = False
        
        return all_ok
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_expert_system():
    """–¢–µ—Å—Ç —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        from core.setupexpert import SetupExpert
        
        data_file = Path("data/lmu_data.json")
        expert = SetupExpert(str(data_file) if data_file.exists() else None)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
        cars = expert.get_available_cars()
        tracks = expert.get_available_tracks()
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(cars)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tracks)} —Ç—Ä–∞—Å—Å")
        
        # –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        conditions = {"temperature": 25, "track": "le_mans"}
        telemetry = {"brake_avg": 0.8, "balance": "neutral"}
        
        recommendations = expert.recommend_setup(conditions, telemetry, "hypercar", "le_mans")
        
        if "adjustments" in recommendations:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üß™ LMU Assistant - –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", test_directories), 
        ("–§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö", test_data_files),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", test_expert_system)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        result = test_func()
        results.append((test_name, result))
    
    print("\n" + "=" * 50)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if not result:
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! LMU Assistant –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: python main.py")
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
