#!/usr/bin/env python3
"""
LMU Assistant - Le Mans Ultimate Setup and Telemetry Tool
Main entry point for the application
"""

import sys
import os
import logging
from pathlib import Path
from PyQt5.QtWidgets import QApplication, QMainWindow, QTabWidget, QVBoxLayout, QWidget, QMessageBox
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QIcon

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    from core.config_manager import ConfigManager
    from core.database import DatabaseManager
    from core.event_system import EventSystem
    from core.constants import AppConstants, UIConstants
    from core.exceptions import LMUAssistantError, ConfigurationError, DatabaseConnectionError
    
    # UI –º–æ–¥—É–ª–∏
    from ui.garage import GarageTab
    from ui.telemetry_tab import TelemetryTab
    from ui.progress_tab import ProgressTab
    from ui.trainer_tab import TrainerTab
    from ui.encyclopedia import EncyclopediaTab
    from ui.overlay_control import OverlayControl
    from ui.preferences_dialog import PreferencesDialog
    
except ImportError as e:
    print(f"Critical import error: {e}")
    print("Please ensure all required modules are installed and accessible")
    sys.exit(1)


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è LMU Assistant"""
    
    def __init__(self, config_manager=None):
        super().__init__()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –ü–ï–†–í–´–ú
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.config_manager = config_manager or ConfigManager()
        self.event_system = EventSystem()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            self.database = DatabaseManager()
            self.logger.info(f"Database initialized: {DatabaseConstants.DEFAULT_DB_NAME}")
        except DatabaseConnectionError as e:
            self.logger.error(f"Database initialization failed: {e}")
            self.database = None
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            QMessageBox.warning(None, "Database Error", 
                              f"Failed to initialize database: {e}\n\nSome features may not work properly.")
        except Exception as e:
            self.logger.error(f"Unexpected database error: {e}")
            self.database = None
        
        self.setup_ui()
        self.setup_window()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.periodic_update)
        self.update_timer.start(UIConstants.STATUS_BAR_UPDATE_INTERVAL)
        
        self.logger.info("LMU Assistant started successfully")
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        layout = QVBoxLayout(central_widget)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #3c3c3c;
                background-color: #2b2b2b;
            }
            QTabBar::tab {
                background-color: #4a4a4a;
                color: #ffffff;
                padding: 12px 20px;
                margin: 2px;
                border-radius: 4px;
                font-weight: bold;
            }
            QTabBar::tab:selected {
                background-color: #0078d4;
            }
            QTabBar::tab:hover {
                background-color: #5a5a5a;
            }
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.setup_tabs()
        
        layout.addWidget(self.tab_widget)
        
        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.statusBar().showMessage("LMU Assistant –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.statusBar().setStyleSheet("""
            QStatusBar {
                background-color: #3c3c3c;
                color: #ffffff;
                border-top: 1px solid #555555;
            }
        """)
    
    def setup_tabs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–æ–∫"""
        try:
            # –í–∫–ª–∞–¥–∫–∞ Setup Expert (–ì–∞—Ä–∞–∂)
            self.garage_tab = GarageTab(self)
            self.tab_widget.addTab(self.garage_tab, "üèéÔ∏è Setup Expert")
            
            # –í–∫–ª–∞–¥–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
            self.telemetry_tab = TelemetryTab(self)
            self.tab_widget.addTab(self.telemetry_tab, "üì° –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è")
            
            # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.progress_tab = ProgressTab(self)
            self.tab_widget.addTab(self.progress_tab, "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
            
            # –í–∫–ª–∞–¥–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞
            self.trainer_tab = TrainerTab(self)
            self.tab_widget.addTab(self.trainer_tab, "üéØ –¢—Ä–µ–Ω–µ—Ä")
            
            # –í–∫–ª–∞–¥–∫–∞ —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏
            self.encyclopedia_tab = EncyclopediaTab(self)
            self.tab_widget.addTab(self.encyclopedia_tab, "üìö –≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è")
            
            # –í–∫–ª–∞–¥–∫–∞ –æ–≤–µ—Ä–ª–µ—è
            self.overlay_tab = OverlayControl(self)
            self.tab_widget.addTab(self.overlay_tab, "üñ•Ô∏è –û–≤–µ—Ä–ª–µ–π")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_tab = self.config_manager.get_setting('ui', 'tabs.default_tab', 0)
            if 0 <= default_tab < self.tab_widget.count():
                self.tab_widget.setCurrentIndex(default_tab)
            
        except Exception as e:
            self.logger.error(f"Error setting up tabs: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫–∏: {e}")
    
    def setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∏–∫–æ–Ω–∫–∞
        self.setWindowTitle(f"{AppConstants.APP_NAME} v{AppConstants.VERSION}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É
        try:
            icon_path = Path(AppConstants.ASSETS_DIR) / "icon.ico"
            if icon_path.exists():
                self.setWindowIcon(QIcon(str(icon_path)))
        except Exception as e:
            self.logger.debug(f"Could not set window icon: {e}")
        
        # –†–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—è –æ–∫–Ω–∞
        ui_config = self.config_manager.get_ui_config()
        window_config = ui_config.get('window', {})
        
        width = window_config.get('width', UIConstants.DEFAULT_WINDOW_WIDTH)
        height = window_config.get('height', UIConstants.DEFAULT_WINDOW_HEIGHT)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        width = max(width, UIConstants.MIN_WINDOW_WIDTH)
        height = max(height, UIConstants.MIN_WINDOW_HEIGHT)
        
        self.resize(width, height)
        
        position = window_config.get('position', [100, 100])
        self.move(position[0], position[1])
        
        if window_config.get('maximized', False):
            self.showMaximized()
        
        # –°—Ç–∏–ª—å –æ–∫–Ω–∞
        self.setStyleSheet(f"""
            QMainWindow {{
                background-color: {UIConstants.BACKGROUND_COLOR};
                color: {UIConstants.FOREGROUND_COLOR};
            }}
            QWidget {{
                background-color: {UIConstants.BACKGROUND_COLOR};
                color: {UIConstants.FOREGROUND_COLOR};
                font-family: 'Segoe UI', Arial, sans-serif;
            }}
        """)
    
    def periodic_update(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_tab_index = self.tab_widget.currentIndex()
            tab_names = ["Setup Expert", "–¢–µ–ª–µ–º–µ—Ç—Ä–∏—è", "–ü—Ä–æ–≥—Ä–µ—Å—Å", "–¢—Ä–µ–Ω–µ—Ä", "–≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è", "–û–≤–µ—Ä–ª–µ–π"]
            
            if 0 <= current_tab_index < len(tab_names):
                status_message = f"–ê–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞: {tab_names[current_tab_index]}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                if self.database:
                    status_message += " | –ë–î: –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
                else:
                    status_message += " | –ë–î: –æ—Ç–∫–ª—é—á–µ–Ω–∞"
                
                self.statusBar().showMessage(status_message)
        
        except Exception as e:
            self.logger.warning(f"Error in periodic update: {e}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.logger.info("Application closing...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–∫–Ω–∞
            window_config = {
                'width': self.width(),
                'height': self.height(),
                'position': [self.x(), self.y()],
                'maximized': self.isMaximized()
            }
            
            try:
                self.config_manager.update_ui_config({'window': window_config})
            except Exception as e:
                self.logger.error(f"Failed to save window config: {e}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            if hasattr(self, 'overlay_tab') and self.overlay_tab:
                try:
                    self.overlay_tab.cleanup()
                except Exception as e:
                    self.logger.error(f"Error cleaning up overlay: {e}")
            
            if self.database:
                try:
                    self.database.close()
                except Exception as e:
                    self.logger.error(f"Error closing database: {e}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            if self.update_timer and self.update_timer.isActive():
                self.update_timer.stop()
            
            self.logger.info("Application closed successfully")
            event.accept()
            
        except Exception as e:
            self.logger.error(f"Error during application close: {e}")
            event.accept()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ


def setup_logging(config_manager: ConfigManager) -> bool:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path(AppConstants.LOG_DIR)
        log_dir.mkdir(exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        log_level = config_manager.get_setting('main', 'log_level', 'INFO')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # –§–∞–π–ª-—Ö–µ–Ω–¥–ª–µ—Ä
        log_file = log_dir / 'lmu_assistant.log'
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(formatter)
        
        # –ö–æ–Ω—Å–æ–ª—å-—Ö–µ–Ω–¥–ª–µ—Ä
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        
        # –ö–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
        root_logger = logging.getLogger()
        root_logger.setLevel(getattr(logging, log_level.upper(), logging.INFO))
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        root_logger.handlers.clear()
        
        root_logger.addHandler(file_handler)
        root_logger.addHandler(console_handler)
        
        return True
        
    except Exception as e:
        print(f"Failed to setup logging: {e}")
        return False


def check_dependencies() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    missing_deps = []
    
    try:
        import PyQt5
    except ImportError:
        missing_deps.append("PyQt5")
    
    try:
        import numpy
    except ImportError:
        missing_deps.append("numpy")
    
    try:
        import matplotlib
    except ImportError:
        missing_deps.append("matplotlib")
    
    if missing_deps:
        print("Missing required dependencies:")
        for dep in missing_deps:
            print(f"  - {dep}")
        print("\nPlease install missing dependencies using:")
        print("pip install " + " ".join(missing_deps))
        return False
    
    return True


def create_directories() -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    directories = [
        AppConstants.CONFIG_DIR,
        AppConstants.LOG_DIR,
        AppConstants.ASSETS_DIR,
        AppConstants.DATA_DIR,
        AppConstants.MODELS_DIR
    ]
    
    success = True
    for directory in directories:
        try:
            Path(directory).mkdir(exist_ok=True)
        except Exception as e:
            print(f"Warning: Could not create directory {directory}: {e}")
            success = False
    
    return success


def check_data_files() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    data_file = Path(AppConstants.DATA_DIR) / "lmu_data.json"
    
    if not data_file.exists():
        print(f"Warning: Data file not found: {data_file}")
        print("Some features may not work properly without the data file.")
        return False
    
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not check_dependencies():
            return 1
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        create_directories()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Å–æ–∫–æ–≥–æ DPI
        QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)
        QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = QApplication(sys.argv)
        app.setApplicationName(AppConstants.APP_NAME)
        app.setApplicationVersion(AppConstants.VERSION)
        app.setOrganizationName(AppConstants.ORGANIZATION)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            config_manager = ConfigManager()
        except ConfigurationError as e:
            print(f"Configuration error: {e}")
            QMessageBox.critical(None, "Configuration Error", str(e))
            return 1
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging(config_manager)
        logger = logging.getLogger(__name__)
        
        logger.info("=" * 50)
        logger.info(f"Starting {AppConstants.APP_NAME} v{AppConstants.VERSION}")
        logger.info("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
        check_data_files()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        try:
            window = MainWindow(config_manager)
            window.show()
            
            logger.info("Main window displayed successfully")
            
        except Exception as e:
            logger.error(f"Failed to create main window: {e}")
            QMessageBox.critical(None, "Startup Error", 
                               f"Failed to create main window:\n{e}")
            return 1
        
        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
        exit_code = app.exec_()
        
        logger.info(f"Application exited with code: {exit_code}")
        return exit_code
        
    except KeyboardInterrupt:
        print("\nApplication interrupted by user")
        return 130
        
    except Exception as e:
        print(f"Critical error during application startup: {e}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            logger = logging.getLogger(__name__)
            logger.critical(f"Critical startup error: {e}", exc_info=True)
        except:
            pass
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –æ—à–∏–±–∫–æ–π –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            if 'app' in locals():
                QMessageBox.critical(None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", 
                                   f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{e}")
        except:
            pass
        
        return 1


if __name__ == "__main__":
    sys.exit(main())
