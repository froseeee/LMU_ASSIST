#!/usr/bin/env python3
"""
LMU Assistant - Le Mans Ultimate Setup and Telemetry Tool
Main entry point for the application
"""

import sys
import os
import logging
from pathlib import Path
from PyQt5.QtWidgets import QApplication, QMainWindow, QTabWidget, QVBoxLayout, QWidget, QMessageBox
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QIcon

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    from core.config_manager import ConfigManager
    from core.database import DatabaseManager
    from core.event_system import EventSystem
    from core.constants import AppConstants, UIConstants, DatabaseConstants, LoggingConstants
    from core.exceptions import LMUAssistantError, ConfigurationError, DatabaseConnectionError
    
    # UI –º–æ–¥—É–ª–∏
    from ui.garage import GarageTab
    from ui.progress_tab import ProgressTab
    from ui.trainer_tab import TrainerTab
    from ui.preferences_dialog import PreferencesDialog
    
except ImportError as e:
    print(f"Critical import error: {e}")
    print("Please ensure all required modules are installed and accessible")
    sys.exit(1)


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è LMU Assistant"""
    
    def __init__(self, config_manager=None):
        super().__init__()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –ü–ï–†–í–´–ú
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.config_manager = config_manager or ConfigManager()
        self.event_system = EventSystem()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            self.database = DatabaseManager()
            self.logger.info(f"Database initialized: {DatabaseConstants.DEFAULT_DB_NAME}")
        except DatabaseConnectionError as e:
            self.logger.error(f"Database initialization failed: {e}")
            self.database = None
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            QMessageBox.warning(None, "Database Error", 
                              f"Failed to initialize database: {e}\n\nSome features may not work properly.")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        self.setup_ui()
        self.setup_window()
        self.setup_update_timer()
        
        self.logger.info(f"{AppConstants.APP_NAME} v{AppConstants.VERSION} started")
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
            central_widget = QWidget()
            self.setCentralWidget(central_widget)
            
            # Layout
            layout = QVBoxLayout(central_widget)
            layout.setContentsMargins(0, 0, 0, 0)
            
            # Tab Widget
            self.tab_widget = QTabWidget()
            layout.addWidget(self.tab_widget)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
            self.setup_tabs()
            
        except Exception as e:
            self.logger.error(f"Error setting up UI: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {e}")
    
    def setup_tabs(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –í–∫–ª–∞–¥–∫–∞ –≥–∞—Ä–∞–∂–∞ (Setup Expert)
            self.garage_tab = GarageTab(self)
            self.tab_widget.addTab(self.garage_tab, "üîß –ì–∞—Ä–∞–∂")
            
            # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.progress_tab = ProgressTab(self)
            self.tab_widget.addTab(self.progress_tab, "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
            
            # –í–∫–ª–∞–¥–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞
            self.trainer_tab = TrainerTab(self)
            self.tab_widget.addTab(self.trainer_tab, "üéØ –¢—Ä–µ–Ω–µ—Ä")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_tab = self.config_manager.get_setting('ui', 'tabs.default_tab', 0)
            if 0 <= default_tab < self.tab_widget.count():
                self.tab_widget.setCurrentIndex(default_tab)
            
        except Exception as e:
            self.logger.error(f"Error setting up tabs: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫–∏: {e}")
    
    def setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∏–∫–æ–Ω–∫–∞
        self.setWindowTitle(f"{AppConstants.APP_NAME} v{AppConstants.VERSION}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É
        try:
            icon_path = Path(AppConstants.ASSETS_DIR) / "icon.ico"
            if icon_path.exists():
                self.setWindowIcon(QIcon(str(icon_path)))
        except Exception as e:
            self.logger.debug(f"Could not set window icon: {e}")
        
        # –†–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—è –æ–∫–Ω–∞
        ui_config = self.config_manager.get_ui_config()
        window_config = ui_config.get('window', {})
        
        width = window_config.get('width', UIConstants.DEFAULT_WINDOW_WIDTH)
        height = window_config.get('height', UIConstants.DEFAULT_WINDOW_HEIGHT)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
        width = max(width, UIConstants.MIN_WINDOW_WIDTH)
        height = max(height, UIConstants.MIN_WINDOW_HEIGHT)
        
        self.resize(width, height)
        
        # –ü–æ–∑–∏—Ü–∏—è –æ–∫–Ω–∞
        if 'position' in window_config:
            pos = window_config['position']
            if isinstance(pos, list) and len(pos) == 2:
                self.move(pos[0], pos[1])
        
        # –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –æ–∫–Ω–æ
        if window_config.get('maximized', False):
            self.showMaximized()
    
    def setup_update_timer(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update_status)
        self.update_timer.start(UIConstants.STATUS_BAR_UPDATE_INTERVAL)
    
    def update_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        try:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç—É—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            status_parts = []
            
            # –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if self.database:
                status_parts.append("üóÑÔ∏è –ë–î OK")
            else:
                status_parts.append("üóÑÔ∏è –ë–î –û—à–∏–±–∫–∞")
            
            # –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            status_parts.append(f"üèÅ LMU Assistant v{AppConstants.VERSION}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            status_text = " | ".join(status_parts)
            self.statusBar().showMessage(status_text)
            
        except Exception as e:
            self.logger.error(f"Error updating status: {e}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.logger.info("Application closing...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–∫–Ω–∞
            window_config = {
                'width': self.width(),
                'height': self.height(),
                'position': [self.x(), self.y()],
                'maximized': self.isMaximized()
            }
            
            try:
                self.config_manager.update_ui_config({'window': window_config})
            except Exception as e:
                self.logger.error(f"Error saving window config: {e}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if self.database:
                self.database.close()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.update_timer.stop()
            
            self.logger.info("Application closed successfully")
            
        except Exception as e:
            self.logger.error(f"Error during application shutdown: {e}")
        
        event.accept()


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path(AppConstants.LOG_DIR)
        log_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
        logging.basicConfig(
            level=getattr(logging, LoggingConstants.DEFAULT_LOG_LEVEL),
            format=LoggingConstants.LOG_FORMAT,
            datefmt=LoggingConstants.LOG_DATE_FORMAT,
            handlers=[
                logging.FileHandler(log_dir / "lmu_assistant.log", encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        
    except Exception as e:
        print(f"Failed to setup logging: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        logger = logging.getLogger(__name__)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = QApplication(sys.argv)
        app.setApplicationName(AppConstants.APP_NAME)
        app.setApplicationVersion(AppConstants.VERSION)
        app.setOrganizationName(AppConstants.ORGANIZATION)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        logger.info(f"Starting {AppConstants.APP_NAME} v{AppConstants.VERSION}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        try:
            window = MainWindow()
            window.show()
        except Exception as e:
            logger.error(f"Failed to create main window: {e}")
            QMessageBox.critical(None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", 
                               f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ:\n{e}")
            return 1
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        return app.exec_()
        
    except Exception as e:
        print(f"Fatal error: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
