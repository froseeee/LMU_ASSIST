#!/usr/bin/env python3
"""
LMU Assistant - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–∏–º—Ä–µ–π—Å–∏–Ω–≥–∞
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import sys
import os
import logging
import traceback
from pathlib import Path
from PyQt5 import QtWidgets, QtCore, QtGui

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent))

try:
    from ui.encyclopedia import EncyclopediaTab
    from ui.telemetry_tab import TelemetryTab
    from ui.garage import GarageTab
    from ui.trainer_tab import TrainerTab
    from ui.progress_tab import ProgressTab
    from ui.overlay_control import OverlayControl
    from core.database import DatabaseManager
    from core.config_manager import ConfigManager
except ImportError as e:
    print(f"Error importing modules: {e}")
    print("Some modules may be missing or have errors")

class LMUAssistant(QtWidgets.QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è LMU Assistant"""
    
    def __init__(self):
        super().__init__()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.config_manager = None
        self.db = None
        self.overlay_control = None
        
        try:
            self.init_logging()
            self.init_config()
            self.init_database()
            self.init_ui()
            self.restore_window_state()
            
            if hasattr(self, 'logger'):
                self.logger.info("LMU Assistant started successfully")
            else:
                print("LMU Assistant started successfully")
            
        except Exception as e:
            self.handle_critical_error("Initialization", e)
    
    def init_logging(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        logging.basicConfig(
            level=logging.INFO,
            format=log_format,
            handlers=[
                logging.FileHandler(log_dir / "lmu_assistant.log", encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        
        self.logger = logging.getLogger(__name__)
        
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        sys.excepthook = self.handle_exception
    
    def init_config(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            self.config_manager = ConfigManager()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if hasattr(self, 'logger'):
                log_level = self.config_manager.get_setting('main', 'log_level', 'INFO')
                logging.getLogger().setLevel(getattr(logging, log_level))
            
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.error(f"Failed to initialize config manager: {e}")
            else:
                print(f"Failed to initialize config manager: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.config_manager = None
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db_name = "lmu_data.db"
            if self.config_manager:
                db_name = self.config_manager.get_setting('main', 'database.name', db_name)
            
            self.db = DatabaseManager(db_name)
            if hasattr(self, 'logger'):
                self.logger.info(f"Database initialized: {db_name}")
            else:
                print(f"Database initialized: {db_name}")
            
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.error(f"Failed to initialize database: {e}")
            else:
                print(f"Failed to initialize database: {e}")
            # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
            self.db = None
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
            self.setWindowTitle("LMU Assistant v2.0")
            self.setWindowIcon(self.get_app_icon())
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if self.config_manager:
                ui_config = self.config_manager.get_ui_config()
                window_config = ui_config.get('window', {})
                
                width = window_config.get('width', 1280)
                height = window_config.get('height', 800)
                position = window_config.get('position', [100, 100])
                
                self.setGeometry(position[0], position[1], width, height)
            else:
                self.setGeometry(100, 100, 1280, 800)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
            self.create_tabs()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∏ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            self.create_menu_bar()
            self.create_status_bar()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
            self.apply_theme()
            
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.error(f"Failed to initialize UI: {e}")
            else:
                print(f"Failed to initialize UI: {e}")
            raise
    
    def create_tabs(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.tabs = QtWidgets.QTabWidget()
        self.setCentralWidget(self.tabs)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        tab_configs = [
            ("üìò –≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è", EncyclopediaTab, "encyclopedia"),
            ("üõ†Ô∏è –ì–∞—Ä–∞–∂", GarageTab, "garage"),
            ("üì° –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è", TelemetryTab, "telemetry"),
            ("üß† –¢—Ä–µ–Ω–µ—Ä", TrainerTab, "trainer"),
            ("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", ProgressTab, "progress"),
            ("üî≤ –û–≤–µ—Ä–ª–µ–π", OverlayControl, "overlay")
        ]
        
        for tab_name, tab_class, tab_id in tab_configs:
            try:
                if tab_class:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
                    tab_widget = tab_class(self)
                    self.tabs.addTab(tab_widget, tab_name)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
                    if tab_id == "overlay":
                        self.overlay_control = tab_widget
                else:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
                    error_tab = QtWidgets.QLabel(f"–ú–æ–¥—É–ª—å {tab_name} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
                    self.tabs.addTab(error_tab, f"‚ùå {tab_name}")
                
            except Exception as e:
                if hasattr(self, 'logger'):
                    self.logger.error(f"Failed to create tab {tab_name}: {e}")
                else:
                    print(f"Failed to create tab {tab_name}: {e}")
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                error_tab = QtWidgets.QLabel(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–∫–∏: {e}")
                self.tabs.addTab(error_tab, f"‚ùå {tab_name}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        if self.config_manager:
            last_tab = self.config_manager.get_setting('ui', 'tabs.default_tab', 0)
            if 0 <= last_tab < self.tabs.count():
                self.tabs.setCurrentIndex(last_tab)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
        self.tabs.currentChanged.connect(self.on_tab_changed)
    
    def create_menu_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        menubar = self.menuBar()
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = menubar.addMenu('–§–∞–π–ª')
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        export_action = QtWidgets.QAction('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...', self)
        export_action.setShortcut('Ctrl+E')
        export_action.triggered.connect(self.export_data)
        file_menu.addAction(export_action)
        
        # –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        import_action = QtWidgets.QAction('–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...', self)
        import_action.setShortcut('Ctrl+I')
        import_action.triggered.connect(self.import_data)
        file_menu.addAction(import_action)
        
        file_menu.addSeparator()
        
        # –í—ã—Ö–æ–¥
        exit_action = QtWidgets.QAction('–í—ã—Ö–æ–¥', self)
        exit_action.setShortcut('Ctrl+Q')
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # –ú–µ–Ω—é "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
        tools_menu = menubar.addMenu('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_action = QtWidgets.QAction('–ù–∞—Å—Ç—Ä–æ–π–∫–∏...', self)
        settings_action.triggered.connect(self.open_settings)
        tools_menu.addAction(settings_action)
        
        # –û–≤–µ—Ä–ª–µ–π
        overlay_action = QtWidgets.QAction('–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ–≤–µ—Ä–ª–µ–π', self)
        overlay_action.setShortcut('F10')
        overlay_action.triggered.connect(self.toggle_overlay)
        tools_menu.addAction(overlay_action)
        
        # –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
        help_menu = menubar.addMenu('–ü–æ–º–æ—â—å')
        
        # –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
        about_action = QtWidgets.QAction('–û –ø—Ä–æ–≥—Ä–∞–º–º–µ', self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
        
        # –õ–æ–≥–∏
        logs_action = QtWidgets.QAction('–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏', self)
        logs_action.triggered.connect(self.show_logs)
        help_menu.addAction(logs_action)
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.status_bar = self.statusBar()
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
        self.telemetry_status = QtWidgets.QLabel("–¢–µ–ª–µ–º–µ—Ç—Ä–∏—è: –û—Ç–∫–ª—é—á–µ–Ω–∞")
        self.telemetry_status.setStyleSheet("color: red;")
        self.status_bar.addPermanentWidget(self.telemetry_status)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_status = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if self.db else "–û—à–∏–±–∫–∞"
        self.db_status = QtWidgets.QLabel(f"–ë–î: {db_status}")
        self.db_status.setStyleSheet("color: green;" if self.db else "color: red;")
        self.status_bar.addPermanentWidget(self.db_status)
    
    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
        if not self.config_manager:
            return
        
        theme = self.config_manager.get_setting('ui', 'theme', 'dark')
        
        if theme == 'dark':
            # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
            dark_style = """
            QMainWindow {
                background-color: #2b2b2b;
                color: #ffffff;
            }
            QTabWidget::pane {
                border: 1px solid #555555;
                background-color: #3c3c3c;
            }
            QTabBar::tab {
                background-color: #555555;
                color: #ffffff;
                padding: 8px 16px;
                margin-right: 2px;
                border-radius: 4px 4px 0px 0px;
            }
            QTabBar::tab:selected {
                background-color: #0078d4;
            }
            QMenuBar {
                background-color: #555555;
                color: #ffffff;
            }
            QMenuBar::item:selected {
                background-color: #0078d4;
            }
            QStatusBar {
                background-color: #555555;
                color: #ffffff;
            }
            QGroupBox {
                color: #ffffff;
                border: 2px solid #666666;
                border-radius: 5px;
                margin-top: 1ex;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
            """
            self.setStyleSheet(dark_style)
    
    def get_app_icon(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏–∑ —Ñ–∞–π–ª–∞
            icon_path = Path("assets/icon.png")
            if icon_path.exists():
                return QtGui.QIcon(str(icon_path))
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        pixmap = QtGui.QPixmap(32, 32)
        pixmap.fill(QtCore.Qt.blue)
        return QtGui.QIcon(pixmap)
    
    def restore_window_state(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞"""
        if not self.config_manager:
            return
        
        try:
            ui_config = self.config_manager.get_ui_config()
            window_config = ui_config.get('window', {})
            
            if window_config.get('maximized', False):
                self.showMaximized()
                
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.warning(f"Failed to restore window state: {e}")
    
    def save_window_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞"""
        if not self.config_manager:
            return
        
        try:
            window_updates = {
                'window': {
                    'width': self.width(),
                    'height': self.height(),
                    'position': [self.x(), self.y()],
                    'maximized': self.isMaximized()
                },
                'tabs': {
                    'default_tab': self.tabs.currentIndex()
                }
            }
            
            self.config_manager.update_ui_config(window_updates)
            
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.warning(f"Failed to save window state: {e}")
    
    def on_tab_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏"""
        try:
            tab_name = self.tabs.tabText(index)
            self.status_bar.showMessage(f"–ê–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞: {tab_name}")
            
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.warning(f"Error handling tab change: {e}")
    
    def toggle_overlay(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–≤–µ—Ä–ª–µ—è"""
        try:
            if self.overlay_control and hasattr(self.overlay_control, 'toggle_overlay'):
                self.overlay_control.toggle_overlay()
            else:
                QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ú–æ–¥—É–ª—å –æ–≤–µ—Ä–ª–µ—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.error(f"Error toggling overlay: {e}")
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ–≤–µ—Ä–ª–µ–π: {e}")
    
    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        try:
            file_path, _ = QtWidgets.QFileDialog.getSaveFileName(
                self, "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "", "JSON Files (*.json)")
            
            if file_path and self.db:
                QtWidgets.QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
                
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.error(f"Error exporting data: {e}")
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    def import_data(self):
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        try:
            file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self, "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "", "JSON Files (*.json)")
            
            if file_path:
                QtWidgets.QMessageBox.information(self, "–ò–º–ø–æ—Ä—Ç", "–§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
                
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.error(f"Error importing data: {e}")
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            QtWidgets.QMessageBox.information(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
            
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.error(f"Error opening settings: {e}")
    
    def show_about(self):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
        <h2>LMU Assistant v2.0</h2>
        <p>–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è Le Mans Ultimate</p>
        <p><b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b></p>
        <ul>
        <li>–ê–Ω–∞–ª–∏–∑ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
        <li>–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π</li>
        <li>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –º–∞—à–∏–Ω –∏ —Ç—Ä–∞—Å—Å LMU</li>
        <li>–û–±—É—á–∞—é—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
        <li>–û–≤–µ—Ä–ª–µ–π –¥–ª—è –∏–≥—Ä—ã</li>
        <li>–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</li>
        </ul>
        <p>¬© 2025 LMU Assistant Team</p>
        """
        QtWidgets.QMessageBox.about(self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)
    
    def show_logs(self):
        """–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤"""
        try:
            log_file = Path("logs/lmu_assistant.log")
            if log_file.exists():
                with open(log_file, 'r', encoding='utf-8') as f:
                    log_content = f.read()
                
                dialog = QtWidgets.QDialog(self)
                dialog.setWindowTitle("–õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                dialog.setGeometry(200, 200, 800, 600)
                
                layout = QtWidgets.QVBoxLayout()
                text_edit = QtWidgets.QTextEdit()
                text_edit.setPlainText(log_content)
                text_edit.setReadOnly(True)
                
                layout.addWidget(text_edit)
                
                close_button = QtWidgets.QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
                close_button.clicked.connect(dialog.close)
                layout.addWidget(close_button)
                
                dialog.setLayout(layout)
                dialog.exec_()
            else:
                QtWidgets.QMessageBox.information(self, "–õ–æ–≥–∏", "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.error(f"Error showing logs: {e}")
            QtWidgets.QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏: {e}")
    
    def handle_exception(self, exc_type, exc_value, exc_traceback):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        if issubclass(exc_type, KeyboardInterrupt):
            sys.__excepthook__(exc_type, exc_value, exc_traceback)
            return
        
        error_msg = ''.join(traceback.format_exception(exc_type, exc_value, exc_traceback))
        if hasattr(self, 'logger'):
            self.logger.critical(f"Uncaught exception: {error_msg}")
        else:
            print(f"Uncaught exception: {error_msg}")
        
        QtWidgets.QMessageBox.critical(
            self, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", 
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n{exc_value}\n\n–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–æ–≥ —Ñ–∞–π–ª."
        )
    
    def handle_critical_error(self, context, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
        error_msg = f"Critical error in {context}: {error}"
        print(f"ERROR: {error_msg}")
        print(f"Traceback: {traceback.format_exc()}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –æ—à–∏–±–∫–∏
        try:
            app = QtWidgets.QApplication.instance()
            if app:
                QtWidgets.QMessageBox.critical(
                    None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", 
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{error}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                )
        except:
            pass
        
        sys.exit(1)
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            if hasattr(self, 'logger'):
                self.logger.info("Application closing...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞
            self.save_window_state()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
            if self.overlay_control and hasattr(self.overlay_control, 'cleanup'):
                self.overlay_control.cleanup()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if self.db and hasattr(self.db, 'close'):
                self.db.close()
            
            if hasattr(self, 'logger'):
                self.logger.info("Application closed successfully")
            
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.error(f"Error during application close: {e}")
            else:
                print(f"Error during application close: {e}")
        
        event.accept()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = QtWidgets.QApplication(sys.argv)
    app.setApplicationName("LMU Assistant")
    app.setApplicationVersion("2.0.0")
    app.setOrganizationName("LMU Assistant Team")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
    app.setStyle("Fusion")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if "--debug" in sys.argv:
        logging.getLogger().setLevel(logging.DEBUG)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        window = LMUAssistant()
        window.show()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–π–Ω—ã–π —Ü–∏–∫–ª
        sys.exit(app.exec_())
        
    except Exception as e:
        print(f"Failed to start application: {e}")
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()